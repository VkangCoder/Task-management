generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_CONNECTIONSTRING")
}

model comments {
  id                               Int       @id @default(autoincrement())
  task_id                          Int?
  user_id                          Int?
  comment                          String?
  created_by                       Int?
  created_at                       DateTime? @default(now()) @db.Timestamp(6)
  updated_by                       Int?
  updated_at                       DateTime? @default(now()) @db.Timestamp(6)
  users_comments_created_byTousers users?    @relation("comments_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tasks                            tasks?    @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_comments_updated_byTousers users?    @relation("comments_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_comments_user_idTousers    users?    @relation("comments_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model department {
  id                                    Int       @id @default(autoincrement())
  department_name                       String?   @db.VarChar(50)
  created_by                            Int?
  created_at                            DateTime? @default(now()) @db.Timestamp(6)
  users_department_created_byTousers    users?    @relation("department_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_users_department_idTodepartment users[]   @relation("users_department_idTodepartment")
}

model franchise {
  id      Int      @id @default(autoincrement())
  name    String?  @db.VarChar(255)
  address String?  @db.VarChar(255)
  status  Boolean?
  users   users[]
}

model menu_role {
  id                                Int               @id @default(autoincrement())
  role_permissions_id               Int?
  function_url                      String?           @db.VarChar(100)
  function_name                     String?           @db.VarChar(100)
  created_by                        Int?
  created_at                        DateTime?         @default(now()) @db.Timestamp(6)
  updated_by                        Int?
  last_updated_at                   DateTime?         @default(now()) @db.Timestamp(6)
  status                            Boolean?
  users_menu_role_created_byTousers users?            @relation("menu_role_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  role_permissions                  role_permissions? @relation(fields: [role_permissions_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_menu_role_updated_byTousers users?            @relation("menu_role_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model role_permissions {
  id                                       Int         @id @default(autoincrement())
  role_id                                  Int?
  permission_name                          String?
  created_by                               Int?
  created_at                               DateTime?   @default(now()) @db.Timestamp(6)
  updated_by                               Int?
  last_updated_at                          DateTime?   @default(now()) @db.Timestamp(6)
  status                                   Boolean?
  menu_role                                menu_role[]
  users_role_permissions_created_byTousers users?      @relation("role_permissions_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roles                                    roles?      @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_role_permissions_updated_byTousers users?      @relation("role_permissions_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model roles {
  id                            Int                @id @default(autoincrement())
  role_name                     String             @db.VarChar(100)
  created_by                    Int?
  created_at                    DateTime?          @default(now()) @db.Timestamp(6)
  updated_by                    Int?
  updated_at                    DateTime?          @default(now()) @db.Timestamp(6)
  status                        Boolean?
  role_permissions              role_permissions[]
  users_roles_created_byTousers users?             @relation("roles_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_roles_updated_byTousers users?             @relation("roles_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_users_role_idToroles    users[]            @relation("users_role_idToroles")
}

model task_status {
  id           Int       @id @default(autoincrement())
  status_name  String    @db.VarChar(50)
  description  String?
  old_value    String?
  new_value    String?
  task_id      Int?
  updated_by   Int
  updated_time DateTime? @default(now()) @db.Timestamp(6)
  status       Boolean
  users        users     @relation(fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tasks        tasks[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model tasks {
  id                             Int         @id @default(autoincrement())
  title                          String      @db.VarChar(100)
  description                    String?
  assignee_id                    Int?
  priority                       String?     @db.VarChar(100)
  created_by                     Int
  created_at                     DateTime    @default(now()) @db.Timestamp(6)
  end_at                         DateTime    @db.Timestamp(6)
  updated_by                     Int?
  updated_at                     DateTime?   @db.Timestamp(6)
  current_status_id              Int
  status                         Boolean
  comments                       comments[]
  users_tasks_assignee_idTousers users?      @relation("tasks_assignee_idTousers", fields: [assignee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_tasks_created_byTousers  users       @relation("tasks_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  task_status                    task_status @relation(fields: [current_status_id], references: [id])
  users_tasks_updated_byTousers  users?      @relation("tasks_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id                                                  Int                @id @default(autoincrement())
  fullname                                            String             @db.VarChar(50)
  birthday                                            DateTime?          @db.Date
  user_img                                            String?            @db.VarChar(255)
  gender                                              Int?               @db.SmallInt
  address                                             String?            @db.VarChar(255)
  email                                               String             @unique @db.VarChar(100)
  phone_number                                        String?            @unique @db.VarChar(20)
  role_id                                             Int?
  department_id                                       Int?
  franchise_id                                        Int?
  created_by                                          Int?
  created_at                                          DateTime?          @default(now()) @db.Timestamp(6)
  updated_by                                          Int?
  updated_at                                          DateTime?          @default(now()) @db.Timestamp(6)
  status                                              Boolean?
  password                                            String             @db.VarChar(255)
  notification_id                                     Int?
  comments_comments_created_byTousers                 comments[]         @relation("comments_created_byTousers")
  comments_comments_updated_byTousers                 comments[]         @relation("comments_updated_byTousers")
  comments_comments_user_idTousers                    comments[]         @relation("comments_user_idTousers")
  department_department_created_byTousers             department[]       @relation("department_created_byTousers")
  menu_role_menu_role_created_byTousers               menu_role[]        @relation("menu_role_created_byTousers")
  menu_role_menu_role_updated_byTousers               menu_role[]        @relation("menu_role_updated_byTousers")
  notification_notification_noti_receive_idTousers    notification[]     @relation("notification_noti_receive_idTousers")
  notification_notification_noti_sender_idTousers     notification[]     @relation("notification_noti_sender_idTousers")
  role_permissions_role_permissions_created_byTousers role_permissions[] @relation("role_permissions_created_byTousers")
  role_permissions_role_permissions_updated_byTousers role_permissions[] @relation("role_permissions_updated_byTousers")
  roles_roles_created_byTousers                       roles[]            @relation("roles_created_byTousers")
  roles_roles_updated_byTousers                       roles[]            @relation("roles_updated_byTousers")
  task_status                                         task_status[]
  tasks_tasks_assignee_idTousers                      tasks[]            @relation("tasks_assignee_idTousers")
  tasks_tasks_created_byTousers                       tasks[]            @relation("tasks_created_byTousers")
  tasks_tasks_updated_byTousers                       tasks[]            @relation("tasks_updated_byTousers")
  department_users_department_idTodepartment          department?        @relation("users_department_idTodepartment", fields: [department_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_department")
  franchise                                           franchise?         @relation(fields: [franchise_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_franchise")
  roles_users_role_idToroles                          roles?             @relation("users_role_idToroles", fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_role")
  notification                                        notification?      @relation(fields: [notification_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model notification {
  id                                        Int                  @id @default(autoincrement())
  noti_type                                 String               @db.VarChar(100)
  noti_sender_id                            Int
  noti_content                              String               @db.VarChar(200)
  noti_receive_id                           Int
  created_at                                DateTime?            @default(now()) @db.Timestamp(6)
  notification_status_id                    Int?
  status                                    Boolean?
  users_notification_noti_receive_idTousers users                @relation("notification_noti_receive_idTousers", fields: [noti_receive_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_notification_noti_sender_idTousers  users                @relation("notification_noti_sender_idTousers", fields: [noti_sender_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  notification_status                       notification_status? @relation(fields: [notification_status_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users                                     users[]
}

model notification_status {
  id           Int            @id @default(autoincrement())
  status_name  String?        @db.VarChar(30)
  created_at   DateTime?      @default(now()) @db.Timestamp(6)
  notification notification[]
}
